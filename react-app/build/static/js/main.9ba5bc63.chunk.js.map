{"version":3,"sources":["context/Modal.js","store/session.js","store/helpers.js","store/patient.js","store/index.js","components/SignupFormPage/index.js","components/OpenModalButton/index.js","components/Navigation/ProfileButton.js","components/Navigation/index.js","components/LoginFormPage/index.js","components/auth/ProtectedRoute.js","components/PatientPages/ProviderHomePage/SearchPatient.js","components/PatientPages/ProviderHomePage/helpers.js","components/PatientPages/ProviderHomePage/FilterPatients.js","components/PatientPages/AddPatientModal/StatesList.js","components/PatientPages/SinglePatientPage/components/AddNote.js","components/PatientPages/AddPatientModal/AddInitialPatientNote.js","components/PatientPages/AddPatientModal/index.js","components/PatientPages/ProviderHomePage/PatientCard.js","components/Loading/index.js","components/PatientPages/ProviderHomePage/index.js","components/PatientPages/SinglePatientPage/components/EditAddress.js","components/PatientPages/SinglePatientPage/components/PatientAddresses.js","components/PatientPages/SinglePatientPage/components/helpers.js","components/PatientPages/SinglePatientPage/components/EditNote.js","components/PatientPages/SinglePatientPage/components/PatientNotes.js","components/PatientPages/SinglePatientPage/components/AddAddress.js","components/PatientPages/SinglePatientPage/components/EditPatient.js","components/PatientPages/SinglePatientPage/components/PatientInfo.js","components/PatientPages/SinglePatientPage/index.js","App.js","index.js"],"names":["ModalContext","React","createContext","ModalProvider","_ref","children","modalRef","useRef","modalContent","setModalContent","useState","onModalClose","setOnModalClose","contextValue","closeModal","_jsxs","_Fragment","_jsx","Provider","value","ref","Modal","useContext","current","ReactDOM","createPortal","id","onClick","useModal","SET_USER","REMOVE_USER","setUser","user","type","payload","initialState","login","email","password","async","response","fetch","method","headers","body","JSON","stringify","ok","data","json","dispatch","status","errors","logout","signUp","username","normalizeObj","arr","obj","forEach","ele","GET_ALL_PATIENTS","GET_SINGLE_PATIENT","PUT_SINGLE_PATIENT","POST_PATIENT_ADDRESS","PUT_PATIENT_ADDRESS","POST_PATIENT_NOTE","PUT_PATIENT_NOTE","getAllPatients","patients","getAllPatientsThunk","res","console","log","getSinglePatientThunk","patient","addresses","notes","getSinglePatient","getPatientsSearchThunk","query","putSinglePatientThunk","patientId","edittedPatient","postPatientAddressThunk","newAddress","address","putPatientAddresssThunk","addressId","edittedAddress","postPatientNoteThunk","newNote","note","putPatientNoteThunk","noteId","edittedNote","allPatients","singlePatient","info","newState","state","arguments","length","undefined","action","information","rootReducer","combineReducers","session","enhancer","applyMiddleware","thunk","configureStore","preloadedState","createStore","SignupFormPage","useDispatch","sessionUser","useSelector","setEmail","setUsername","setPassword","confirmPassword","setConfirmPassword","setErrors","Redirect","to","className","onSubmit","e","preventDefault","map","error","idx","onChange","target","required","OpenModalButton","modalComponent","buttonText","onButtonClick","ProfileButton","showMenu","setShowMenu","ulRef","history","useHistory","useEffect","closeMenu","contains","document","addEventListener","removeEventListener","ulClassName","openMenu","class","style","push","Navigation","isLoaded","NavLink","exact","LoginFormPage","ProtectedRoute","props","Route","SearchPatient","search","setSearch","placeholder","onKeyDown","key","priorityListPatients","filter","toLowerCase","filterPatients","filters","cities","city","states","statuses","filtered","includes","FilterPatients","setFilter","setFilteredPatients","statesDisp","setStateDisp","cityDisp","setCityDisp","stausDisp","setStatusDisp","validFilters","validFiltersCreator","handleAddingFilter","split","updatedFilters","handleRemovingFilter","splice","Object","values","flat","toggleDropdown","stateSetter","prevState","handClosingDispays","dispFunction","dispBool","entries","_ref2","count","checked","_ref3","_ref4","StatesList","AddNote","setAddNote","setEditNote","intialNote","noteList","index","handleNoteListRemove","handleNoteListChange","title","setTitle","text","setText","submitted","setSubmitted","trim","name","noteData","FormData","append","AddInitialPatientNote","setNoteList","list","AddPatientModal","addAddressBool","setAddAddress","editAddressBool","setEditAddress","editAddresVals","editPatientBool","setEditPatient","editPatientVals","firstName","setFirstName","first_name","lastName","setLastName","last_name","middleName","setMiddleName","middle_name","birthday","setBirthday","dateString","Date","toISOString","formatDate","date_of_birth","setStatus","indexOf","setAddress","setCity","setState","isCurrent","setIsCurrent","addressCount","now","patientFormData","addressFormData","noteListFormData","noteFormData","postNewPatientThunk","newPatient","new_patient","default","toUpperCase","PatientCard","cards","Loading","ProviderHomePage","loading","setLoading","filteredPatients","setTimeout","EditAddress","edit","setEdit","PatientAddresses","toLocaleString","year","month","day","EditNote","PatientNotes","created_at","AddAddress","addAddress","EditPatient","PatientInfo","SinglePatientPage","useParams","addNote","sort","a","b","App","setIsLoaded","then","Switch","path","store","Root","BrowserRouter","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9ba5bc63.chunk.js","sourcesContent":["import React, { useRef, useState, useContext } from 'react';\nimport ReactDOM from 'react-dom';\nimport './Modal.css';\n\nconst ModalContext = React.createContext();\n\nexport function ModalProvider({ children }) {\n  const modalRef = useRef();\n  const [modalContent, setModalContent] = useState(null);\n  // callback function that will be called when modal is closing\n  const [onModalClose, setOnModalClose] = useState(null);\n\n  const closeModal = () => {\n    setModalContent(null); // clear the modal contents\n    // If callback function is truthy, call the callback function and reset it\n    // to null:\n    if (typeof onModalClose === 'function') {\n      setOnModalClose(null);\n      onModalClose();\n    }\n  };\n\n  const contextValue = {\n    modalRef, // reference to modal div\n    modalContent, // React component to render inside modal\n    setModalContent, // function to set the React component to render inside modal\n    setOnModalClose, // function to set the callback function called when modal is closing\n    closeModal // function to close the modal\n  };\n\n  return (\n    <>\n      <ModalContext.Provider value={contextValue}>\n        {children}\n      </ModalContext.Provider>\n      <div ref={modalRef} />\n    </>\n  );\n}\n\nexport function Modal() {\n  const { modalRef, modalContent, closeModal } = useContext(ModalContext);\n  // If there is no div referenced by the modalRef or modalContent is not a\n  // truthy value, render nothing:\n  if (!modalRef || !modalRef.current || !modalContent) return null;\n\n  // Render the following component to the div referenced by the modalRef\n  return ReactDOM.createPortal(\n    <div id=\"modal\">\n      <div id=\"modal-background\" onClick={closeModal} />\n      <div id=\"modal-content\">\n        {modalContent}\n      </div>\n    </div>,\n    modalRef.current\n  );\n}\n\nexport const useModal = () => useContext(ModalContext);","// constants\nconst SET_USER = \"session/SET_USER\";\nconst REMOVE_USER = \"session/REMOVE_USER\";\n\nconst setUser = (user) => ({\n\ttype: SET_USER,\n\tpayload: user,\n});\n\nconst removeUser = () => ({\n\ttype: REMOVE_USER,\n});\n\nconst initialState = { user: null };\n\nexport const authenticate = () => async (dispatch) => {\n\tconst response = await fetch(\"/api/auth/\", {\n\t\theaders: {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t},\n\t});\n\tif (response.ok) {\n\t\tconst data = await response.json();\n\t\tif (data.errors) {\n\t\t\treturn;\n\t\t}\n\n\t\tdispatch(setUser(data));\n\t}\n};\n\nexport const login = (email, password) => async (dispatch) => {\n\tconst response = await fetch(\"/api/auth/login\", {\n\t\tmethod: \"POST\",\n\t\theaders: {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\temail,\n\t\t\tpassword,\n\t\t}),\n\t});\n\n\tif (response.ok) {\n\t\tconst data = await response.json();\n\t\tdispatch(setUser(data));\n\t\treturn null;\n\t} else if (response.status < 500) {\n\t\tconst data = await response.json();\n\t\tif (data.errors) {\n\t\t\treturn data.errors;\n\t\t}\n\t} else {\n\t\treturn [\"An error occurred. Please try again.\"];\n\t}\n};\n\nexport const logout = () => async (dispatch) => {\n\tconst response = await fetch(\"/api/auth/logout\", {\n\t\theaders: {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t},\n\t});\n\n\tif (response.ok) {\n\t\tdispatch(removeUser());\n\t}\n};\n\nexport const signUp = (username, email, password) => async (dispatch) => {\n\tconst response = await fetch(\"/api/auth/signup\", {\n\t\tmethod: \"POST\",\n\t\theaders: {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\tusername,\n\t\t\temail,\n\t\t\tpassword,\n\t\t}),\n\t});\n\n\tif (response.ok) {\n\t\tconst data = await response.json();\n\t\tdispatch(setUser(data));\n\t\treturn null;\n\t} else if (response.status < 500) {\n\t\tconst data = await response.json();\n\t\tif (data.errors) {\n\t\t\treturn data.errors;\n\t\t}\n\t} else {\n\t\treturn [\"An error occurred. Please try again.\"];\n\t}\n};\n\nexport default function reducer(state = initialState, action) {\n\tswitch (action.type) {\n\t\tcase SET_USER:\n\t\t\treturn { user: action.payload };\n\t\tcase REMOVE_USER:\n\t\t\treturn { user: null };\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}","export const normalizeObj = (arr) => {\n    const obj = {};\n    arr.forEach((ele) => obj[ele.id] = ele );\n    return obj;\n  }\n  \n  ","import { normalizeObj } from './helpers';\n\n//--------------------- Type Variables ---------------------\nconst GET_ALL_PATIENTS = 'patients/getAllPatients'\nconst GET_SINGLE_PATIENT = 'patients/getSinglePatient'\nconst POST_SINGLE_PATIENT = 'patients/postSinglePatient'\nconst PUT_SINGLE_PATIENT = 'patients/putSinglePatient'\n\nconst POST_PATIENT_ADDRESS = 'patients/postPatientAddress'\nconst PUT_PATIENT_ADDRESS = \"patients/putPatientAddresss\"\n\nconst POST_PATIENT_NOTE = \"patients/postPatientNote\"\nconst PUT_PATIENT_NOTE = \"patients/putPatientNote\"\n\n//--------------------- Action Creators --------------------\nconst getAllPatients = (patients) => {\n    return {\n        type: GET_ALL_PATIENTS,\n        patients\n    }\n}\n\nconst getSinglePatient = (patient, addresses, notes) => {\n    return {\n        type: GET_SINGLE_PATIENT,\n        patient,\n        addresses,\n        notes,\n    }\n}\n\nconst putSinglePatient = (patient) => {\n    return {\n        type: PUT_SINGLE_PATIENT,\n        patient\n    }\n}\n\nconst postPatientAddress = (address) => {\n    return {\n        type: POST_PATIENT_ADDRESS,\n        address\n    }\n}\n\nconst putPatientAddresss = (address) => {\n    return {\n        type: PUT_PATIENT_ADDRESS,\n        address\n    }\n}\n\nconst postPatientNote = (note) => {\n    return {\n        type: POST_PATIENT_NOTE,\n        note\n    }\n}\n\nconst putPatientNote = (note) => {\n    return {\n        type: PUT_PATIENT_NOTE,\n        note\n    }\n}\n\n//------------------------- THUNK --------------------------\n\n// -------------- Patient Related --------------\nexport const getAllPatientsThunk = () => async (dispatch) => {\n    const res = await fetch(\"/api/patients/\")\n\n    if (res.ok) {\n        const { patients } = await res.json()\n        dispatch(getAllPatients(patients))\n        return\n    } else {\n        console.log(\"Problem loading all patients\")\n    }\n}\n\nexport const getSinglePatientThunk = (id) => async (dispatch) => {\n    const res = await fetch(`/api/patients/${id}`)\n\n    if (res.ok) {\n        const { patient } = await res.json()\n        const { addresses, notes } = patient\n        delete patient.addresses\n        delete patient.notes\n        dispatch(getSinglePatient(patient, addresses, notes))\n        return\n    } else {\n        console.log(\"Problem loading all patients\")\n    }\n}\n\nexport const getPatientsSearchThunk = (query) => async (dispatch) => {\n    const res = await fetch(`/api/search?query=${query}`)\n    if (res.ok) {\n        //projects here will be filtered based on the search query\n        const { patients } = await res.json()\n        dispatch(getAllPatients(patients))\n        return\n    } else {\n        console.log(\"Problem with loading projects with query params\")\n    }\n}\n\nexport const postNewPatientThunk = (newPatient, newAddress, noteListFormData) => async (dispatch) => {\n    const res = await fetch(`/api/patients/`, {\n        method: \"POST\",\n        body: newPatient\n    })\n\n    if (res.ok) {\n        const { new_patient } = await res.json()\n        dispatch(postPatientAddressThunk(new_patient.id, newAddress))\n\n        noteListFormData.forEach(newNote => {\n            dispatch(postPatientNoteThunk(new_patient.id, newNote))\n        })\n    } else {\n        const { errors } = await res.json()\n        return errors\n    }\n}\n\nexport const putSinglePatientThunk = (patientId, edittedPatient) => async (dispatch) => {\n    const res = await fetch(`/api/patients/${patientId}`, {\n        method: \"PUT\",\n        body: edittedPatient\n    })\n\n    if (res.ok) {\n        const { edittedPatient } = await res.json()\n        dispatch(putSinglePatient(edittedPatient))\n        delete patient.addresses\n\n    } else {\n        const { errors } = await res.json()\n        return errors\n    }\n\n}\n\n// -------------- Address Related --------------\nexport const postPatientAddressThunk = (patientId, newAddress) => async (dispatch) => {\n    const res = await fetch(`/api/patients/${patientId}/address`, {\n        method: \"POST\",\n        body: newAddress\n    })\n\n    if (res.ok) {\n        const { newAddress } = await res.json()\n        dispatch(postPatientAddress(newAddress))\n        dispatch(getAllPatientsThunk())\n        return\n    } else {\n        const { errors } = await res.json()\n        return errors\n    }\n}\n\nexport const putPatientAddresssThunk = (patientId, addressId, edittedAddress) => async (dispatch) => {\n\n    const res = await fetch(`/api/patients/${patientId}/address/${addressId}`, {\n        method: \"PUT\",\n        body: edittedAddress\n    })\n\n    if (res.ok) {\n        const { edittedAddress } = await res.json()\n        dispatch(putPatientAddresss(edittedAddress))\n        // dispatch(getSinglePatientThunk(patientId))\n        return\n    } else {\n        const { errors } = await res.json()\n        return errors\n    }\n}\n\n// -------------- Note Related --------------\nexport const postPatientNoteThunk = (patientId, newNote) => async (dispatch) => {\n    const res = await fetch(`/api/patients/${patientId}/note`, {\n        method: \"POST\",\n        body: newNote\n    })\n\n    if (res.ok) {\n        const { newNote } = await res.json()\n\n        dispatch(postPatientNote(newNote))\n        return\n    } else {\n        const { errors } = await res.json()\n        return errors\n    }\n}\n\nexport const putPatientNoteThunk = (patientId, noteId, edittedNote) => async (dispatch) => {\n    const res = await fetch(`/api/patients/${patientId}/note/${noteId}`, {\n        method: \"PUT\",\n        body: edittedNote\n    })\n\n    if (res.ok) {\n        const { edittedNote } = await res.json()\n        dispatch(putPatientNote(edittedNote))\n        return\n    } else {\n        const { errors } = await res.json()\n        return errors\n    }\n}\n\n//---------------------- Initial State ---------------------\nconst initialState = {\n    allPatients: {},\n    singlePatient: {\n        info: {},\n        notes: {},\n        addresses: {},\n    },\n};\n\n//------------------------- Reducer  -----------------------\nconst patient = (state = initialState, action) => {\n    let newState;\n    switch (action.type) {\n        // -------------- Patient Related --------------\n        case GET_ALL_PATIENTS:\n            return { ...state, allPatients: { ...normalizeObj(action.patients) } }\n        case GET_SINGLE_PATIENT:\n            return {\n                ...state,\n                singlePatient: {\n                    info: { ...action.patient },\n                    notes: { ...normalizeObj(action.notes) },\n                    addresses: { ...normalizeObj(action.addresses) }\n                }\n            }\n        case PUT_SINGLE_PATIENT:\n            let information = { ...state.singlePatient.info }\n            information = action.patient\n            return {\n                ...state,\n                singlePatient: {\n                    ...state.singlePatient,\n                    info: { ...information }\n                }\n            };\n\n\n        // -------------- Address Related --------------\n        case POST_PATIENT_ADDRESS:\n            newState = { ...state }\n            console.log(newState)\n            newState.singlePatient.addresses[action.address.id] = action.address\n            console.log(newState)\n            return newState\n\n        case PUT_PATIENT_ADDRESS:\n            let addresses = { ...state.singlePatient.addresses }\n            addresses[action.address.id] = action.address\n            return {\n                ...state,\n                singlePatient: {\n                    ...state.singlePatient,\n                    addresses: { ...addresses }\n                }\n            };\n\n        // -------------- Notes Related --------------\n\n        case POST_PATIENT_NOTE:\n            newState = { ...state }\n            newState.singlePatient.notes[action.note.id] = action.note\n            return newState\n\n        case PUT_PATIENT_NOTE:\n            let notes = { ...state.singlePatient.notes }\n            notes[action.note.id] = action.note\n            return {\n                ...state,\n                singlePatient: {\n                    ...state.singlePatient,\n                    notes: { ...notes }\n                }\n            };\n\n\n        default:\n            return state;\n    }\n};\n\nexport default patient;\n","import { createStore, combineReducers, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport session from './session'\nimport patient from './patient';\n\nconst rootReducer = combineReducers({\n  session,\n  patient\n});\n\n\nlet enhancer;\n\nif (process.env.NODE_ENV === 'production') {\n  enhancer = applyMiddleware(thunk);\n} else {\n  const logger = require('redux-logger').default;\n  const composeEnhancers =\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n  enhancer = composeEnhancers(applyMiddleware(thunk, logger));\n}\n\nconst configureStore = (preloadedState) => {\n  return createStore(rootReducer, preloadedState, enhancer);\n};\n\nexport default configureStore;\n","import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nimport { signUp } from \"../../store/session\";\nimport './SignupForm.css';\n\nfunction SignupFormPage() {\n  const dispatch = useDispatch();\n  const sessionUser = useSelector((state) => state.session.user);\n  const [email, setEmail] = useState(\"\");\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [errors, setErrors] = useState([]);\n\n  if (sessionUser) return <Redirect to=\"/\" />;\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (password === confirmPassword) {\n      const data = await dispatch(signUp(username, email, password));\n      if (data) {\n        setErrors(data)\n      }\n    } else {\n      setErrors(['Confirm Password field must be the same as the Password field']);\n    }\n  };\n\n  return (\n    <div className=\"signup-container\">\n      <h1 className=\"signup-heading\">Sign Up</h1>\n      <form className=\"signup-form\" onSubmit={handleSubmit}>\n        <ul>\n          {errors.map((error, idx) => (\n            <li key={idx} className=\"signup-error\">\n              {error}\n            </li>\n          ))}\n        </ul>\n        <label className=\"signup-label\">\n          Email\n          <input\n            type=\"text\"\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n            required\n            className=\"signup-input\"\n          />\n        </label>\n        <label className=\"signup-label\">\n          Username\n          <input\n            type=\"text\"\n            value={username}\n            onChange={(e) => setUsername(e.target.value)}\n            required\n            className=\"signup-input\"\n          />\n        </label>\n        <label className=\"signup-label\">\n          Password\n          <input\n            type=\"password\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            required\n            className=\"signup-input\"\n          />\n        </label>\n        <label className=\"signup-label\">\n          Confirm Password\n          <input\n            type=\"password\"\n            value={confirmPassword}\n            onChange={(e) => setConfirmPassword(e.target.value)}\n            required\n            className=\"signup-input\"\n          />\n        </label>\n        <button type=\"submit\" className=\"signup-button\">\n          Sign Up\n        </button>\n      </form>\n    </div>\n\n  );\n}\n\nexport default SignupFormPage;\n","import React from 'react';\nimport { useModal } from '../../context/Modal';\n\nfunction OpenModalButton({\n  modalComponent, // component to render inside the modal\n  buttonText, // text of the button that opens the modal\n  onButtonClick, // optional: callback function that will be called once the button that opens the modal is clicked\n  onModalClose // optional: callback function that will be called once the modal is closed\n}) {\n  const { setModalContent, setOnModalClose } = useModal();\n\n  const onClick = () => {\n    if (onModalClose) setOnModalClose(onModalClose);\n    setModalContent(modalComponent);\n    if (onButtonClick) onButtonClick();\n  };\n\n  return (\n    <button onClick={onClick}>{buttonText}</button>\n  );\n}\n\nexport default OpenModalButton;","import React, { useState, useEffect, useRef } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { logout } from \"../../store/session\";\nimport { useHistory } from \"react-router-dom\";\nimport OpenModalButton from \"../OpenModalButton\";\nimport LoginFormModal from \"../LoginFormModal\";\nimport SignupFormModal from \"../SignupFormModal\";\n\n\nfunction ProfileButton({ user }) {\n  const dispatch = useDispatch();\n  const [showMenu, setShowMenu] = useState(false);\n  const ulRef = useRef();\n  const history = useHistory()\n\n  const openMenu = () => {\n    if (showMenu) return;\n    setShowMenu(true);\n  };\n\n  useEffect(() => {\n    if (!showMenu) return;\n\n    const closeMenu = (e) => {\n      if (!ulRef.current.contains(e.target)) {\n        setShowMenu(false);\n      }\n    };\n\n    document.addEventListener(\"click\", closeMenu);\n\n    return () => document.removeEventListener(\"click\", closeMenu);\n  }, [showMenu]);\n\n  const handleLogout = (e) => {\n    e.preventDefault();\n    dispatch(logout());\n  };\n\n  const ulClassName = \"profile-dropdown\" + (showMenu ? \"\" : \" hidden\");\n  const closeMenu = () => setShowMenu(false);\n\n  return (\n    <>\n      <button className=\"profile-button\" onClick={openMenu}>\n        <i className=\"fas fa-user-circle\" />\n      </button>\n      <ul className={ulClassName} ref={ulRef}>\n        {user ? (\n          <ul class=\"user-info-container\">\n            <li>{user.username}</li>\n            <li>{user.email}</li>\n            <li>\n              <button class=\"logout-button\" onClick={handleLogout}>Log Out</button>\n            </li>\n          </ul>\n\n        ) : (\n          <>\n            <li style ={{\"cursor\":\"pointer\"}} onClick={() => history.push(\"/login\")}>Login </li>\n            <li style ={{\"cursor\":\"pointer\"}} onClick={() => history.push(\"/signup\")}>Sign Up </li>\n          </>\n        )}\n      </ul>\n    </>\n  );\n}\n\nexport default ProfileButton;\n","import { React, useState } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom/cjs/react-router-dom.min';\n\nimport ProfileButton from './ProfileButton';\n\nimport './Navigation.css';\n\nfunction Navigation({ isLoaded }) {\n\tconst dispatch = useDispatch()\n\tconst history = useHistory()\n\n\t// ------------ Slice of State Selectors -----------\n\tconst sessionUser = useSelector(state => state.session.user);\n\n\treturn (\n\t\t<div class=\"navbar\">\n\t\t\t<div>\n\t\t\t\t<NavLink exact to=\"/\">Home</NavLink>\n\t\t\t</div>\n\t\t\t{isLoaded && (\n\t\t\t\t<div class=\"profile-button-container\">\n\t\t\t\t\t<ProfileButton user={sessionUser} />\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\n\t);\n}\n\nexport default Navigation;\n","import React, { useState } from \"react\";\nimport { login } from \"../../store/session\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nimport './LoginForm.css';\n\nfunction LoginFormPage() {\n  const dispatch = useDispatch();\n  const sessionUser = useSelector((state) => state.session.user);\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [errors, setErrors] = useState([]);\n\n  if (sessionUser) return <Redirect to=\"/\" />;\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const data = await dispatch(login(email, password));\n    if (data) {\n      setErrors(data);\n    }\n  };\n\n  const handleClickDemoUser = async (e) => {\n    e.preventDefault();\n    const data = await dispatch(login(\"demo@gmail.com\", \"password\"));\n    if (data) {\n      return setErrors(data);\n    }\n  };\n\n  return (\n    <div className=\"loginPage\">\n      <p className=\"login-heading\">Log In</p>\n      <form onSubmit={handleSubmit}>\n        <ul>\n          {errors.map((error, idx) => (\n            <li key={idx} className=\"login-error\">\n              {error}\n            </li>\n          ))}\n        </ul>\n        <label className=\"login-label\">\n          Email\n          <input\n            type=\"text\"\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n            required\n            className=\"login-input\"\n          />\n        </label>\n        <label className=\"login-label\">\n          Password\n          <input\n            type=\"password\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            required\n            className=\"login-input\"\n          />\n        </label>\n        <button type=\"submit\" className=\"login-button\">\n          Log In\n        </button>\n        <button onClick={handleClickDemoUser} className=\"demo-button\">\n          Demo\n        </button>\n      </form>\n    </div>\n\n\n  );\n}\n\nexport default LoginFormPage;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Route, Redirect } from 'react-router-dom';\n\nconst ProtectedRoute = props => {\n  const user = useSelector(state => state.session.user)\n  return (\n    <Route {...props}>\n      {(user)? props.children  : <Redirect to='/login' />}\n    </Route>\n  )\n};\n\n\nexport default ProtectedRoute;\n","import { React, useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom/cjs/react-router-dom.min';\n\nimport { getPatientsSearchThunk,getAllPatientsThunk} from '../../../store/patient';\n\nfunction SearchPatient() {\n    const dispatch = useDispatch()\n    const history = useHistory()\n\n    // ---------------- State Variables----------------\n    const [search, setSearch] = useState(\"\")\n\n    return (\n        <div className='search-bar-container'>\n            <input\n                type='search'\n                className='search-bar'\n                placeholder='Search for Patients'\n                onChange={async (e) => {\n                    setSearch(e.target.value)\n                }}\n                onKeyDown={async (e) => {\n                    if (e.key === 'Enter') {\n                        search.length ?\n                            await dispatch(getPatientsSearchThunk(search)) :\n                            await dispatch(getAllPatientsThunk())\n                        history.push(\"/\")\n                    }\n                }}\n            />\n            {/* dispatch the search thunk here, passing it e.target.value */}\n            <button className='search-button'\n                onClick={async (e) => {\n                    search.length ?\n                        await dispatch(getPatientsSearchThunk(search)) :\n                        await dispatch(getAllPatientsThunk())\n                    history.push(\"/\")\n                }}>\n                <i class=\"icon-search\"></i>\n            </button>\n        </div>\n    )\n}\n\nexport default SearchPatient","// Function is used to go through the patinets arr and sort out which filters can be seleceted\nexport function validFiltersCreator(patients) {\n    let validFilters = {\n        \"status\": {},\n        \"city\": {},\n        \"state\": {}\n    }\n\n    for (let patient of patients) {\n        let status = patient[\"status\"]\n        status in validFilters[\"status\"] ? validFilters[\"status\"][status] += 1 : validFilters[\"status\"][status] = 1\n        let state = patient['addresses'][0]['state']\n        let city = patient['addresses'][0]['city']\n        state in validFilters[\"state\"] ? validFilters[\"state\"][state] += 1 : validFilters[\"state\"][state] = 1\n        city in validFilters[\"city\"] ? validFilters[\"city\"][city] += 1 : validFilters[\"city\"][city] = 1\n\n    }\n\n    return validFilters\n}\n\nexport function priorityListPatients(patients) {\n    let active = patients.filter((patient) => patient.status.toLowerCase() === \"active\")\n    let onBoarding = patients.filter((patient) => patient.status.toLowerCase() === \"onboarding\")\n    let inquiry = patients.filter((patient) => patient.status.toLowerCase() === \"inquiry\")\n    let churned = patients.filter((patient) => patient.status.toLowerCase() === \"churned\")\n\n    let priority_list = [...active, ...onBoarding, ...inquiry, ...churned]\n    return priority_list\n}\n\nexport function filterPatients(patients,filters,){\n    let cities = filters?.city || []\n    let states = filters?.state || []\n    let statuses = filters?.status || []\n\n    let filtered = patients\n\n    if (cities.length) {\n      filtered = filtered.filter((patient) => cities.includes(patient.addresses[0].city))\n    }\n    if (states.length) {\n      filtered = filtered.filter((patient) => states.includes(patient.addresses[0].state))\n    }\n    if (statuses.length) {\n      filtered = filtered.filter((patient) => statuses.includes(patient.status))\n    }\n    console.log(\"filtered......................\",filtered)\n    console.log(\"city......................\",cities)\n    console.log(\"state......................\",states)\n    console.log(\"status......................\",statuses)\n    return filtered\n}","import { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport OpenModalButton from \"../../OpenModalButton\";\n\nimport SearchPatient from \"./SearchPatient\";\n\nimport { validFiltersCreator, filterPatients,priorityListPatients } from \"./helpers\";\n\nfunction FilterPatients({ patients, setFilter, filters, setFilteredPatients }) {\n    const dispatch = useDispatch()\n\n    //  --------------- State Variables ---------------\n    const [statesDisp, setStateDisp] = useState(false)\n    const [cityDisp, setCityDisp] = useState(false)\n    const [stausDisp, setStatusDisp] = useState(false)\n\n\n    //  ---------- Slice of State Selectors ----------\n    const allPatients = useSelector(state => state.patient.allPatients)\n    let validFilters = validFiltersCreator(patients)\n\n    /*\n    Okay Hear me out so when I click on one of these checkboxes here is what will happen:\n    - Set's a State Varibale with the Values of Whatever is Clicked \n    - Filters Patients with values that match that \n    - set Patients to the new filter array of patients  \n    */\n\n    const handleAddingFilter = (e) => {\n        // When a check boxed in not checked this function will run and do the following:\n        // - extract the filter and the value \n        // - use threaded filter prop and push to its appropiate key\n        // - Set Filter to that new value \n        const [filter, value] = e.target.value.split(\",\")\n        const updatedFilters = { ...filters }\n        updatedFilters[filter].push(value)\n        setFilter(updatedFilters)\n        setFilteredPatients(filterPatients(patients, filters))\n    }\n\n    const handleRemovingFilter = (e) => {\n        const [filter, value] = e.target.value.split(\",\")\n        const updatedFilters = { ...filters }\n        updatedFilters[filter].splice(value, 1)\n        setFilter(updatedFilters)\n        // Okay so this one is kinda hacky,\n        // - IF THERE ARE FILTERS \n        if (Object.values(filters).flat().length) {\n            // -- Will filter patients based off of those filter and send it to the patient cards\n            setFilteredPatients(filterPatients(patients, filters))\n            // - OTHERWISE / ELSE\n        } else {\n            // - Will return all patients from slice of state\n            setFilteredPatients(priorityListPatients(Object.values(allPatients)))\n        }\n\n\n    }\n\n    const toggleDropdown = (stateSetter) => {\n        stateSetter((prevState) => !prevState);\n    };\n\n    const handClosingDispays = (dispFunction, dispBool) => {\n        if (!dispBool) {\n            dispFunction(!dispBool)\n        } else {\n            setFilteredPatients(priorityListPatients(Object.values(allPatients)))\n            dispFunction(!dispBool)\n        }\n    }\n\n    return (\n        <div>\n            {/* Would be in a line  */}\n            <div className=\"filter-container\">\n                <div>\n                    <button\n                        className={`filter-button ${statesDisp ? \"active\" : \"\"}`}\n                        onClick={() => {\n                            toggleDropdown(setStateDisp)\n                            handClosingDispays(setStateDisp, statesDisp)\n                        }}\n                    >\n                        State\n                    </button>\n                    {/* Dropdown content */}\n                    <div className=\"filter-dropdown-content\">\n                        {statesDisp && Object.entries(validFilters.state).map(([state, count]) => {\n                            return (\n                                <label key={`${state}`}>\n                                    <input\n                                        type=\"checkbox\"\n                                        value={[\"state\", state]}\n                                        onChange={(e) => {\n                                            !e.target.checked ? handleRemovingFilter(e) : handleAddingFilter(e);\n                                        }}\n                                    />\n                                    {`${state}(${count})`}\n                                </label>\n                            );\n                        })}\n                    </div>\n                </div>\n                <div>\n                    <button\n                        className={`filter-button ${cityDisp ? \"active\" : \"\"}`}\n                        onClick={() => {\n                            toggleDropdown(setCityDisp)\n                            handClosingDispays(setCityDisp, cityDisp)\n                        }}\n                    >\n                        City\n                    </button>\n                    {/* Dropdown content */}\n                    <div className=\"filter-dropdown-content\">\n                        {cityDisp && Object.entries(validFilters.city).map(([city, count]) => {\n                            return (\n                                <label key={`${city}`}>\n                                    <input\n                                        type=\"checkbox\"\n                                        value={[\"city\", city]}\n                                        onChange={(e) => {\n                                            !e.target.checked ? handleRemovingFilter(e) : handleAddingFilter(e);\n                                        }}\n                                    />\n                                    {`${city}(${count})`}\n                                </label>\n                            );\n                        })}\n                    </div>\n                </div>\n                <div>\n                    <button\n                        className={`filter-button ${stausDisp ? \"active\" : \"\"}`}\n                        onClick={() => {\n                            toggleDropdown(setStatusDisp)\n                            handClosingDispays(setStatusDisp, stausDisp)\n                        }}\n                    >\n                        Status\n                    </button>\n                    {/* Dropdown content */}\n                    <div className=\"filter-dropdown-content\">\n                        {stausDisp && Object.entries(validFilters.status).map(([status, count]) => {\n                            return (\n                                <label key={`${status}`}>\n                                    <input\n                                        type=\"checkbox\"\n                                        value={[\"status\", status]}\n                                        onChange={(e) => {\n                                            !e.target.checked ? handleRemovingFilter(e) : handleAddingFilter(e);\n                                        }}\n                                    />\n                                    {`${status}(${count})`}\n                                </label>\n                            );\n                        })}\n                    </div>\n                </div>\n            </div>\n\n        </div>\n    )\n}\n\nexport default FilterPatients","export let StatesList = [\n    'AL',\n    'AK',\n    'AS',\n    'AZ',\n    'AR',\n    'CA',\n    'CO',\n    'CT',\n    'DE',\n    'DC',\n    'FM',\n    'FL',\n    'GA',\n    'GU',\n    'HI',\n    'ID',\n    'IL',\n    'IN',\n    'IA',\n    'KS',\n    'KY',\n    'LA',\n    'ME',\n    'MH',\n    'MD',\n    'MA',\n    'MI',\n    'MN',\n    'MS',\n    'MO',\n    'MT',\n    'NE',\n    'NV',\n    'NH',\n    'NJ',\n    'NM',\n    'NY',\n    'NC',\n    'ND',\n    'MP',\n    'OH',\n    'OK',\n    'OR',\n    'PW',\n    'PA',\n    'PR',\n    'RI',\n    'SC',\n    'SD',\n    'TN',\n    'TX',\n    'UT',\n    'VT',\n    'VI',\n    'VA',\n    'WA',\n    'WV',\n    'WI',\n    'WY'];\n","import { useState, useEffect } from \"react\"\nimport { useDispatch } from \"react-redux\"\n\nimport { postPatientNoteThunk, putPatientNoteThunk } from \"../../../../store/patient\"\n\nfunction AddNote({\n    patientId,\n    // Props for Adding Note\n    setAddNote,\n    // Props for Editting Note\n    setEditNote,\n    edittedNote,\n    intialNote,\n    // Props for Adding an Intial Note\n    noteList,\n    index,\n    handleNoteListRemove,\n    handleNoteListChange,\n}) {\n    // Need prop thread patient ID\n    const dispatch = useDispatch()\n\n    //  --------------- State Variables ---------------\n    const [title, setTitle] = useState(edittedNote?.title || \"\")\n    const [text, setText] = useState(edittedNote?.text || \"\")\n\n    const [errors, setErrors] = useState({})\n    const [submitted, setSubmitted] = useState(false)\n\n    //------------------- Use Effect -------------------\n    useEffect(() => {\n        // This uesEffect is meant to help with error handling\n        const errors = {}\n\n        if (title.length > 100) errors[\"title\"] = \"Title must be under 100 characthers\"\n        if (!text.trim().length) errors[\"text\"] = \"Text is Required\"\n\n        setErrors(errors)\n\n    }, [text, title])\n\n    //  ------------- Submit Functionalities -------------\n    const handleSubmit = async (e) => {\n        e.preventDefault()\n\n        setSubmitted(true)\n        if (Object.values(errors).length) return\n\n        const noteData = new FormData()\n        noteData.append(\"title\", title)\n        noteData.append(\"text\", text)\n\n        const data = await\n            (edittedNote ?\n                dispatch(putPatientNoteThunk(patientId, edittedNote.id, noteData))\n                :\n                dispatch(postPatientNoteThunk(patientId, noteData)))\n        if (data) {\n            setErrors(data.errors)\n        } else {\n            // Since we are reusing this component for both the add and edit\n            //  - We need this logic to determine which one to set to false\n            //  - setting to false therfore changes the input to whatever it's supposed to be\n            edittedNote ? setEditNote(false) : setAddNote(false)\n        }\n    }\n\n\n    return (\n        <div className={`${noteList ? \"\" : \"input-form-container\"}`}>\n            {submitted && <span className=\"error-message\">{errors.title}</span>}\n            <label >\n                Title\n                <input\n                    className=\"form-input\"\n                    name=\"title\"\n                    type=\"text\"\n                    value={noteList ? intialNote.title : title}\n                    onChange={(e) => {\n                        !noteList && setTitle(e.target.value)\n                        noteList && handleNoteListChange(e, index)\n                    }\n                    }\n                />\n            </label>\n\n            {submitted && <span className='error-message'>{errors.text}</span>}\n            <label >\n                Text\n                <input\n                    className=\"form-input\"\n                    name=\"text\"\n                    type=\"text\"\n                    value={noteList ? intialNote.text : text}\n                    onChange={(e) => {\n                        !noteList && setText(e.target.value)\n                        noteList && handleNoteListChange(e, index)\n                    }}\n                />\n            </label>\n\n            <div className=\"button-container\">\n                {!noteList &&\n                    <button\n                        className=\"form-button\"\n                        onClick={handleSubmit} type=\"submit\">\n                        {edittedNote ? \"Edit\" : \"Add\"}\n                    </button>\n                }\n                <button\n                    className=\"form-button\"\n                    onClick={() => {\n                        edittedNote && setEditNote(false)\n                        !noteList && !edittedNote && setAddNote(false)\n                        noteList && handleNoteListRemove(index)\n                    }\n                    }>{noteList ? \"Remove\" : \"Cancel\"}\n                </button>\n\n            </div>\n        </div>\n    )\n}\n\nexport default AddNote\n","import { useState } from \"react\"\n\nimport AddNote from \"../SinglePatientPage/components/AddNote\"\n\nfunction AddInitialPatientNote({ noteList, setNoteList, patientId }) {\n    //  --------------- State Variables ---------------\n    // Note List Should be Threaded from index\n\n    const handleNoteListAdd = (e) => {\n        e.preventDefault()\n        setNoteList([...noteList, {}])\n    }\n\n    const handleNoteListRemove = (index, e) => {\n        const list = [...noteList]\n        list.splice(index, 1)\n        setNoteList(list)\n    }\n\n    const handleNoteListChange = (e, index) => {\n        const { value, name } = e.target;\n        const list = [...noteList];\n        list[index][name] = value;\n        setNoteList(list);\n    };\n\n\n    return (\n        <>\n\n            {/* // Clicking the add button would then starting creating input fields  */}\n            {/* // *** Based off of however many times they click ***  */}\n            {noteList.length >= 1 &&\n                <h4>Add Notes</h4>\n            }\n            {noteList.map((note, index) =>\n                <AddNote\n                    patientId={patientId}\n                    noteList={true}\n                    handleNoteListRemove={handleNoteListRemove}\n                    handleNoteListChange={handleNoteListChange}\n                    index={index}\n                    intialNote={note}\n                />\n\n            )}\n            <hr/>\n            {/* Limiting it to two times but coule be changed */}\n            {noteList.length <= 1 &&\n                <button\n                    className=\"form-button\"\n                    onClick={handleNoteListAdd}>\n                    Add Note\n                </button>\n\n            }\n\n        </>\n    )\n}\n\nexport default AddInitialPatientNote\n","import { useState, useEffect } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useModal } from \"../../../context/Modal\";\n\nimport { StatesList } from \"./StatesList\"\nimport AddInitialPatientNote from \"./AddInitialPatientNote\";\n\nimport {\n    getSinglePatientThunk,\n    postNewPatientThunk,\n    putSinglePatientThunk,\n    putPatientAddresssThunk,\n    postPatientAddressThunk\n} from \"../../../store/patient\";\n\n\nimport \"./AddPatientModal.css\"\n\nconst formatDate = (dateString) => {\n    if (!dateString) return;\n    const date = new Date(dateString)\n    return date.toISOString().split('T')[0];\n}\n\nfunction AddPatientModal({\n    // Patient ID: Edditing Routes Mainly Use This\n    patientId,\n    // Props for Adding an Address\n    addAddressBool,\n    setAddAddress,\n    // Props for Editting an Address\n    editAddressBool,\n    setEditAddress,\n    editAddresVals,\n    // Props for Editting a Patient\n    editPatientBool,\n    setEditPatient,\n    editPatientVals,\n}) {\n    const dispatch = useDispatch()\n    const { closeModal } = useModal();\n\n    //  --------------- State Variables ---------------\n    const [firstName, setFirstName] = useState(editPatientVals?.first_name || \"\")\n    const [lastName, setLastName] = useState(editPatientVals?.last_name || \"\")\n    const [middleName, setMiddleName] = useState(editPatientVals?.middle_name || \"\")\n\n    const [birthday, setBirthday] = useState(formatDate(editPatientVals?.date_of_birth) || \"\")\n\n    let validStatuses = [\"Inquiry\", \"Onboarding\", \"Active\", \"Churned\"]\n    const [status, setStatus] = useState(validStatuses.indexOf(editPatientVals?.status) + 1 || \"\")\n\n    const [address, setAddress] = useState(editAddresVals?.address || \"\")\n    const [city, setCity] = useState(editAddresVals?.city || \"\")\n    const [state, setState] = useState(editAddresVals?.state || \"\")\n    const [isCurrent, setIsCurrent] = useState(editAddresVals?.current)\n\n    const [noteList, setNoteList] = useState([])\n\n    const [errors, setErrors] = useState({})\n    const [submitted, setSubmitted] = useState(false)\n\n    // ------------ Slice of State Selectors -----------\n    const current = useSelector(state => state.session.user)\n    const addresses = useSelector(state => state.patient.singlePatient.addresses)\n\n    // To make sure that there is at least one currnet addres in patients file\n    let addressCount = Object.values(addresses).filter(address => address.current === true).length\n\n\n    //------------------- Use Effect -------------------\n    useEffect(() => {\n        // This useEffect is meant to help with error handling\n        const errors = {};\n\n        if (!addAddressBool && !editAddressBool && !firstName.length) errors[\"firstName\"] = \"First Name is Required\"\n        if (!addAddressBool && !editAddressBool && !lastName.length) errors[\"lastName\"] = \"Last Name is Required\"\n\n        if (!editPatientBool && !address.length) errors[\"address\"] = \"Address is Requried\"\n\n        if (!editPatientBool && !StatesList.includes(state)) errors[\"state\"] = \"Invalid State\"\n        if (!editPatientBool && !state.length) errors[\"state\"] = \"State is Required\"\n        // if (state.length !== 2) errors[\"state\"] = \"Invalid State\"\n\n        if (!editPatientBool && !city.length) errors[\"city\"] = \"City is Required\"\n        if (!editPatientBool && city.length < 3) errors[\"city\"] = \"Invalid City\"\n        if (!editPatientBool && city.length > 50) errors[\"city\"] = \"Invalid City\"\n\n        if (editAddressBool && !isCurrent && addressCount < 2) errors['current'] = \"Must have at least one Current Address\"\n\n        if (!addAddressBool && !editAddressBool && (!status || status === \"Select a Status\")) errors[\"status\"] = \"Invalid Status\"\n        if (!addAddressBool && !editAddressBool && !birthday) errors['birthday'] = \"Birthday is required.\"\n        if (!addAddressBool && !editAddressBool && new Date(birthday) > Date.now()) errors['birthday'] = \"Invalid Birthday\"\n\n        setErrors(errors)\n\n\n    }, [firstName, lastName, middleName, birthday, status, address, state, city, isCurrent, noteList])\n    console.log(status)\n    //  ------------- Submit Functionalities -------------\n    // Function to Submit a New Patient\n    const handleSubmit = async (e) => {\n        // Meant for adding a new patient / their address\n        e.preventDefault()\n\n        // Once Submitted is true, Errors will show in their designated areas\n        // ** Will Note Proceed to Delete if there are error ***\n        setSubmitted(true)\n        if (Object.values(errors).length) return\n\n        // Formats data to whatever it needs to look like\n        const patientFormData = new FormData()\n        patientFormData.append('first_name', firstName)\n        patientFormData.append('last_name', lastName)\n        middleName && patientFormData.append('middle_name', middleName)\n        patientFormData.append('date_of_birth', birthday)\n        patientFormData.append('status_id', status)\n        patientFormData.append(\"provider_id\", current.id)\n\n        const addressFormData = new FormData()\n        addressFormData.append('address', address)\n        addressFormData.append('state', state)\n        addressFormData.append('city', city)\n        addressFormData.append('isCurrent', true)\n\n        let noteListFormData = []\n        noteList.forEach(note => {\n            const noteFormData = new FormData\n            noteFormData.append(\"title\", note.title)\n            noteFormData.append(\"text\", note.text)\n\n            noteListFormData.push(noteFormData)\n        })\n\n        const data = await dispatch(postNewPatientThunk(patientFormData, addressFormData, noteListFormData))\n\n        // console.log(data)\n        if (data) {\n            setErrors(data.errors)\n            dispatch(getSinglePatientThunk(patientId))\n        }\n        else {\n            closeModal()\n\n        }\n    }\n    // Recycling this Componet for adding / editting addresses\n    const handleAddressSubmit = async (e) => {\n        // Meant for adding a new address to an existing patient\n        e.preventDefault()\n        setSubmitted(true)\n        if (Object.values(errors).length) return\n\n        const addressFormData = new FormData()\n        addressFormData.append('address', address)\n        addressFormData.append('state', state)\n        addressFormData.append('city', city)\n        addressFormData.append('isCurrent', isCurrent)\n\n        const data = await (\n            editAddressBool ?\n                dispatch(putPatientAddresssThunk(patientId, editAddresVals.id, addressFormData))\n                :\n                dispatch(postPatientAddressThunk(patientId, addressFormData)))\n\n        if (data) {\n            setErrors(data.errors)\n        }\n        else {\n            //Future Implementation of InLine Editting as Opposed to Modal ----- \n            addAddressBool && setAddAddress(false)\n            editAddressBool && setEditAddress(false)\n        }\n    }\n    // Recycling this Componet for editting a patient\n    const handlePatientEdit = async (e) => {\n        e.preventDefault()\n        setSubmitted(true)\n        if (Object.values(errors).length) return\n\n        const patientFormData = new FormData()\n        patientFormData.append('first_name', firstName)\n        patientFormData.append('last_name', lastName)\n        middleName && patientFormData.append('middle_name', middleName)\n        patientFormData.append('date_of_birth', birthday)\n        patientFormData.append('status_id', status)\n        patientFormData.append(\"patient_id\", patientId)\n        patientFormData.append(\"provider_id\", current.id)\n\n        const data = await dispatch(putSinglePatientThunk(patientId, patientFormData))\n\n        // debugger\n        if (data) {\n            setErrors(data)\n        }\n        else {\n            //Future Implementation of InLine Editting as Opposed to Modal ----- \n            setEditPatient(false)\n            // closeModal()\n\n        }\n\n    }\n\n\n    //  ---------------- React Component -----------------\n    return (\n        <form\n            className={`${\n                (addAddressBool | editAddressBool | editPatientBool) ? \n                \"input-form-container\" : \"form-container\"}`}\n            onSubmit={handleSubmit}>\n\n            {/* Logic if we are Adding an Address or a patient */}\n            {/* Logic for Editting a Patient */}\n            {addAddressBool ? \"\" :\n                editAddressBool ? \"\" :\n                    <>\n                        <h2 className=\"form-heading\">Please enter the following information</h2>\n                        {submitted && <span className='error-message'>{errors.firstName}</span>}\n                        <label className=\"form-label\">\n                            First Name\n                            <input\n                                type=\"text\"\n                                value={firstName}\n                                onChange={(e) => setFirstName(e.target.value)}\n                                className=\"form-input\"\n                            />\n                        </label>\n\n                        {submitted && <span className=\"error-message\">{errors.middleName}</span>}\n                        <label className=\"form-label\">\n                            Middle Name <span className=\"optional-text\">(optional)</span>\n                            <input\n                                type=\"text\"\n                                value={middleName}\n                                onChange={(e) => setMiddleName(e.target.value)}\n                                className=\"form-input\"\n                            />\n                        </label>\n\n\n                        {submitted && <span className='error-message'>{errors.lastName}</span>}\n                        <label className=\"form-label\">\n                            Last Name\n                            <input\n                                type=\"text\"\n                                value={lastName}\n                                onChange={e => setLastName(e.target.value)}\n                                className=\"form-input\"\n                            />\n                        </label>\n\n                        {submitted && <span className='error-message'>{errors.birthday}</span>}\n                        <label className=\"form-label\">\n                            Date of Birth\n                            <input\n                                type=\"date\"\n                                value={birthday}\n                                onChange={e => setBirthday(e.target.value)}\n                                className=\"form-input\"\n                            />\n                        </label>\n\n                        {submitted && <span className='error-message'>{errors.status}</span>}\n                        <label className=\"form-label\">\n                            Status\n                            <select\n                                value={status}\n                                onChange={(e) => setStatus(e.target.value)}\n                            >\n                                <option default>Select a Status</option>\n                                <option value=\"1\">Inquiry</option>\n                                <option value=\"2\">Onboarding</option>\n                                <option value=\"3\">Active</option>\n                                <option value=\"4\">Churned</option>\n                            </select>\n                        </label>\n                    </>\n            }\n\n            {/* Logic if we are Adding an Address or a Patient */}\n            {/* Logic for Editting an Address */}\n            {(!editAddressBool && !editPatientBool) ?\n                <h4> Please Enter Your Current Address</h4> :\n                \"\"\n            }\n            {\n                !editPatientBool &&\n                <>\n                    {submitted && <span className='error-message'>{errors.address}</span>}\n                    <label className=\"form-label\">\n                        Street\n                        <input\n                            className=\"form-input\"\n                            type=\"text\"\n                            value={address}\n                            onChange={e => setAddress(e.target.value)}\n                        />\n                    </label>\n\n                    {submitted && <span className='error-message'>{errors.city}</span>}\n                    <label className=\"form-label\">\n                        City\n                        <input\n                            className=\"form-input\"\n                            type=\"text\"\n                            value={city}\n                            onChange={e => setCity(e.target.value)}\n                        />\n                    </label>\n\n                    {submitted && <span className='error-message'>{errors.state}</span>}\n                    <label className=\"form-label\">\n                        State\n                        <input\n                            className=\"form-input\"\n                            type=\"text\"\n                            value={state.toUpperCase()}\n                            onChange={e => setState(e.target.value.toUpperCase())}\n                        />\n                    </label>\n                </>\n\n            }\n\n            {\n                editAddressBool &&\n                <>\n                    {submitted && <span className='error-message'>{errors.current}</span>}\n\n                    <label className=\"form-label\">\n                        Current\n                        <input\n                            className=\"form-input\"\n                            type=\"checkbox\"\n                            value={isCurrent}\n                            checked={isCurrent}\n                            onChange={e => { setIsCurrent(!isCurrent) }}\n                        />\n                    </label>\n                </>\n            }\n\n            {(addAddressBool || editAddressBool || editPatientBool) ?\n                <div className=\"button-container\">\n                    {\n                        <button\n                            className=\"form-button\"\n                            onClick={\n                                editPatientBool ?\n                                    handlePatientEdit\n                                    :\n                                    handleAddressSubmit\n                            }\n                        >\n                            {addAddressBool ? \"Add\" : \"Edit\"}\n                        </button>\n\n                    }\n                    <button\n                        className=\"form-button\"\n                        onClick={() => {\n                            addAddressBool && setAddAddress(false)\n                            editAddressBool && setEditAddress(false)\n                            editPatientBool && setEditPatient(false)\n                        }}>\n                        Cancel</button>\n                </div>\n                : \"\"}\n\n            {(!addAddressBool && !editAddressBool && !editPatientBool) &&\n                <>\n                    <AddInitialPatientNote\n                        noteList={noteList}\n                        setNoteList={setNoteList}\n                        patientId={patientId}\n                    />\n\n                    <button\n                        className=\"form-submit\"\n                        type=\"submit\"\n                    >\n                        Submit\n                    </button>\n\n                </>\n            }\n\n        </form>\n    )\n}\n\nexport default AddPatientModal\n","import { NavLink } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\n// Import useState for local state\n\n// Modals\nimport OpenModalButton from \"../../OpenModalButton\";\nimport AddPatientModal from \"../AddPatientModal\";\n\nfunction PatientCard({ patients }) {\n\n  let cards = patients.map((patient) => {\n    return (\n      <li\n        key={`${patient.id}`}\n        className={`patient-card ${patient.status.toLowerCase() === 'inquiry' || patient.status.toLowerCase() === 'onboarding'\n          ? 'status-inquiry'\n          : patient.status.toLowerCase() === 'active'\n            ? 'status-active'\n            : patient.status.toLowerCase() === 'churned'\n              ? 'status-churned'\n              : ''\n          }`}>\n        {/* left side */}\n        <div className=\"patient-info\">\n          <NavLink to={`/patients/${patient.id}`}>\n            <p className=\"patient-name\">\n              {patient.last_name}\n              {patient?.middle_name && ` ${patient.middle_name}`}, {patient.first_name}\n            </p>\n          </NavLink>\n          <p className=\"patient-address\">\n            {patient.addresses[0].city} {patient.addresses[0].state}\n          </p>\n        </div>\n        {/* right side */}\n        <div className=\"patient-status\">\n          <p>{patient.status}</p>\n        </div>\n      </li>\n    );\n  });\n\n  return (\n    <div className=\"patient-grid\">\n      {cards}\n      <li className=\"add-patient-button\">\n        <OpenModalButton\n          buttonText={<span className=\"add-button-text\"><i className=\"icon-plus\"></i> Add Patient</span>}\n          modalComponent={<AddPatientModal />}\n        />\n      </li>\n    </div>\n  )\n}\n\nexport default PatientCard;\n\n// useEffect(() => {\n//   // ----- Helper for Filtering -----\n//   function filterPatients(priority_list, filters) {\n//     let cities = filters?.city || [];\n//     let states = filters?.state || [];\n//     let statuses = filters?.status || [];\n\n//     let filtered = priority_list;\n\n//     if (cities.length) {\n//       filtered = filtered.filter((patient) => cities.includes(patient.addresses[0].city));\n//     }\n//     if (states.length) {\n//       filtered = filtered.filter((patient) => states.includes(patient.addresses[0].state));\n//     }\n//     if (statuses.length) {\n//       filtered = filtered.filter((patient) => statuses.includes(patient.status));\n//     }\n\n//     return filtered;\n//   }\n\n//   // Update the local state\n//   const updatedFilteredPatients = filterPatients(patients, filters);\n//   setPatientCards(updatedFilteredPatients)\n//   setFilteredPatients(updatedFilteredPatients)\n// }, [patients, filters]); // Add dependencies for the useEffect\n","// Loading.js\nimport React from 'react';\n\nimport './Loading.css'\nconst Loading = () => {\n  return (\n    <div className=\"loading-container\">\n      <div className=\"loading-shimmer\"></div>\n    </div>\n  );\n};\n\nexport default Loading;\n","// General Imports\nimport { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\n// Thunks\nimport { getAllPatientsThunk } from \"../../../store/patient\";\n\n// Components\nimport FilterPatients from \"./FilterPatients\";\nimport PatientCard from \"./PatientCard\";    \nimport SearchPatient from \"./SearchPatient\";\nimport Loading from \"../../Loading\";\n\n// CSS\nimport \"./ProviderHomePage.css\"\n\n// Helpers\nimport { priorityListPatients } from \"./helpers\";\n\nfunction ProviderHomePage() {\n    const dispatch = useDispatch()\n\n    // ---------------- State Variables----------------\n    const [loading, setLoading] = useState(true)\n    const [filters, setFilter] = useState({ \"status\": [], \"city\": [], \"state\": [] })\n    const [filteredPatients, setFilteredPatients] = useState([])\n\n    // ------------ Slice of State Selectors -----------\n    const allPatients = useSelector(state => state.patient.allPatients)\n    const user = useSelector(state => state.session.user)\n\n    //------------------- Use Effect -------------------\n    useEffect(() => {\n        dispatch(getAllPatientsThunk())\n\n        setTimeout(() => {\n            setLoading(false)\n        }, 1000)\n    }, [dispatch])\n\n    let patients = priorityListPatients(Object.values(allPatients))\n    if (loading) return <Loading/>\n    return (\n        <div className=\"component-container\">\n            <div className=\"component-title\">\n                <p>{user.username}'s Patients</p>\n            </div>\n            <div className=\"filter-container\">\n                <SearchPatient />\n                <FilterPatients\n                    patients={!filteredPatients.length ? patients : filteredPatients}\n                    setFilter={setFilter}\n                    setFilteredPatients={setFilteredPatients}\n                    filters={filters}\n                />\n            </div>\n            <ul className=\"component-list\">\n\n                <ul className=\"component-list-item\">\n                    <PatientCard\n                        patients={!filteredPatients.length ? patients : filteredPatients}\n                        filters={filters}\n                        filteredPatients={filteredPatients}\n                    />\n                </ul>\n            </ul>\n        </div>\n    )\n\n}\n\nexport default ProviderHomePage\n","import { useState } from \"react\";\n\nimport AddPatientModal from \"../../AddPatientModal\";\n\nfunction EditAddress({ patientId,edit, setEdit, address }) {\n    return (\n        <AddPatientModal\n            editAddressBool = {edit}\n            setEditAddress = {setEdit}\n            editAddresVals = {address}\n            patientId={patientId}\n\n        />\n    )\n}\n\nexport default EditAddress","import { useState, useEffect } from \"react\"\n\nimport EditAddress from \"./EditAddress\"\nimport OpenModalButton from \"../../../OpenModalButton\"\n\n\nfunction PatientAddresses({ address, patientId }) {\n    const [edit, setEdit] = useState(false)\n\n    if (edit) return (\n        <EditAddress\n            edit={edit}\n            setEdit={setEdit}\n            address={address}\n            patientId={patientId}\n\n        />)\n\n    return (\n        <li style={{\"listStyle\":\"none\"}}key={`address${address.id}`} className=\"address-list-item\">\n            {/* Left side content */}\n            <div className=\"address-left\">\n                <div className=\"address-details\">\n                    <p>Street: {address.address}</p>\n                    <p>City: {address.city}</p>\n                    <p>State: {address.state.toUpperCase()}</p>\n                </div>\n                {address.current ? (\n                    <p>\n                        <span className=\"green-dot\"></span>Current\n                    </p>\n                ) : (\n                    <p>\n                        <span className=\"red-dot\"></span>Not Current\n                    </p>\n                )}\n            </div>\n\n            {/* Right side content */}\n            <div className=\"address-right\">\n                <button className=\"address-button\" onClick={() => setEdit(true)}>\n                    <i className=\"fas fa-edit\"></i>\n                </button>\n                {/* <button className=\"address-button\">\n                    <i className=\"icon-trash\"></i>\n                </button> */}\n            </div>\n        </li>\n\n    )\n\n}\n\nexport default PatientAddresses","export const formatDate = (dateString) => {\n    if (!dateString) return;\n\n    const options = {\n        year: \"numeric\",\n        month: \"long\",\n        day: \"numeric\",\n      };\n    const date = new Date(dateString)\n    return date.toLocaleString(\"en-US\",options);\n}","import AddNote from \"./AddNote\"\n\nfunction EditNote({ setEditNote, edittedNote, patientId }) {\n    return (\n        <AddNote\n            setEditNote={setEditNote}\n            edittedNote={edittedNote}\n            patientId={patientId}\n        />\n    )\n}\n\nexport default EditNote\n","import { useState } from \"react\"\nimport { formatDate } from \"./helpers\"\n\nimport EditNote from \"./EditNote\"\nimport OpenModalButton from \"../../../OpenModalButton\"\n\n\nfunction PatientNotes({ patientId, note }) {\n    const [edit, setEdit] = useState(false)\n\n    if (edit) return (\n        <EditNote\n            setEditNote={setEdit}\n            edittedNote={note}\n            patientId={patientId}\n        />)\n\n\n    return (\n        <li style={{\"listStyle\":\"none\"}}key={`notes${note.id}`} className=\"notes-list-item\">\n            {/* Top section */}\n            <div className=\"notes-top\">\n                {/* Left side of the top section */}\n                <div className=\"notes-left\">\n                    <p className=\"note-title\">{note.title}</p>\n                    <p className=\"note-date\">{formatDate(note.created_at)}</p>\n                </div>\n\n                {/* Right side of the top section */}\n                <div className=\"notes-right\">\n                    <button className=\"notes-button\" onClick={() => setEdit(true)}>\n                        <i className=\"fas fa-edit\"></i>\n                    </button>\n                    {/* <button className=\"notes-button\">\n                        <i className=\"icon-trash\"></i>\n                    </button> */}\n                </div>\n            </div>\n\n            {/* Bottom section */}\n            <div className=\"notes-bottom\">\n                <p className=\"note-text\">{note.text}</p>\n            </div>\n        </li>\n\n    )\n\n}\n\nexport default PatientNotes","import AddPatientModal from \"../../AddPatientModal\";\n\nfunction AddAddress({patientId,addAddress,setAddAddress}) {\n\n    return (\n        <AddPatientModal\n            setAddAddress={setAddAddress}\n            addAddressBool={addAddress}\n            patientId={patientId} \n            />\n    )\n}\n\nexport default AddAddress","import AddPatientModal from \"../../AddPatientModal\";\n\nfunction EditPatient({\n  edit,\n  setEditPatient,\n  edittedPatient,\n  patientId\n}) {\n  setEditPatient(true)\n  return (\n    <AddPatientModal\n      editPatientBool={edit}\n      setEditPatient={setEditPatient}\n      editPatientVals={edittedPatient}\n      patientId={patientId}\n    />\n  )\n}\n\nexport default EditPatient\n","import { useState } from \"react\"\nimport { formatDate } from \"./helpers\"\n\nimport EditPatient from \"./EditPatient\"\nimport OpenModalButton from \"../../../OpenModalButton\"\n\n\nfunction PatientInfo({ patient }) {\n    const [edit, setEdit] = useState(false)\n\n    if (edit) return (\n        <EditPatient\n            edit={edit}\n            setEditPatient={setEdit}\n            edittedPatient={patient}\n            patientId={patient.id}\n        />)\n\n    return (\n        <div className=\"patient-info-container\">\n            <div className=\"patient-name-section\">\n                <div className=\"patient-name\">\n                    <h3>\n                        {patient.first_name}\n                        {patient?.middle_name && ` ${patient.middle_name}`} {patient.last_name}\n                    </h3>\n                <div className=\"patient-status\">{patient.status}</div>\n                </div>\n            </div>\n            <div className=\"patient-dob-section\">\n                <p className=\"patient-dob-text\">Date of Birth: {formatDate(patient.date_of_birth)}</p>\n            </div>\n            <button className=\"edit-button\" onClick={() => setEdit(true)}>\n                <i className=\"fas fa-edit\"></i>\n            </button>\n        </div>\n    )\n}\n\nexport default PatientInfo\n","import { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useParams, useHistory } from \"react-router-dom\";\n\nimport { getSinglePatientThunk } from \"../../../store/patient\"\n\nimport PatientAddresses from \"./components/PatientAddresses\";\nimport PatientNotes from \"./components/PatientNotes\";\nimport AddNote from \"./components/AddNote\";\nimport AddAddress from \"./components/AddAddress\";\nimport PatientInfo from \"./components/PatientInfo\";\nimport Loading from \"../../Loading\";\n\nimport \"./SinglePatient.css\"\nfunction SinglePatientPage() {\n    const dispatch = useDispatch()\n    const { id } = useParams()\n    const history = useHistory()\n\n    // ------------ Slice of State Selectors -----------\n    const singlePatient = useSelector(state => state.patient.singlePatient)\n\n    // ---------------- State Variables----------------\n    const [loading, setLoading] = useState(true)\n    const [addAddress, setAddAddress] = useState(false)\n    const [addNote, setAddNote] = useState(false)\n\n    //------------------- Use Effect -------------------\n    useEffect(() => {\n        dispatch(getSinglePatientThunk(id))\n\n        setTimeout(() => {\n            setLoading(false)\n        }, 1000)\n    }, [dispatch, id])\n\n    if (loading) return <Loading/>\n    if (!singlePatient.info.id) history.push(\"/\")\n    return (\n        <div className=\"main-container\">\n            {/* General Information */}\n            <div className=\"patient-info\">\n                <PatientInfo patient={singlePatient.info} />\n            </div>\n\n            <div className=\"address-notes-section\">\n                {/* Address */}\n                <div className=\"address-section\">\n                    <h3> Addresss </h3>\n                    <ul>\n                        {Object.values(singlePatient.addresses)\n                            .sort((a, b) => (a.current === b.current) ? 0 : a ? 1 : -1)\n                            .map(address =>\n                                <PatientAddresses\n                                    address={address}\n                                    patientId={singlePatient.info.id}\n                                />)}\n                        {/* Add Patient Address */}\n                        {!addAddress ?\n                            <button\n                                className=\"form-button\"\n                                onClick={() => { setAddAddress(true) }}\n                            >\n                                <i class=\"icon-plus\"></i> Add Patient Address\n                            </button>\n                            :\n                            <AddAddress\n                                setAddAddress={setAddAddress}\n                                addAddress={addAddress}\n                                patientId={singlePatient.info.id}\n                            />\n                        }\n\n                    </ul>\n                </div>\n\n                {/* Notes */}\n                <div className=\"notes-section\">\n                    <h3>Notes</h3>\n                    <ul>\n                        {\n                            Object.values(singlePatient.notes).map(note =>\n                                <PatientNotes\n                                    note={note}\n                                    patientId={singlePatient.info.id}\n                                />\n                            )\n                        }\n                        {/* Add Patient Note */}\n                        {!addNote ?\n                            <button\n                                className=\"form-button\"\n                                onClick={() => { setAddNote(true) }}\n                            >\n                                <i class=\"icon-plus\"></i> Add Patient Note\n                            </button>\n\n                            :\n\n                            <AddNote\n                                setAddNote={setAddNote}\n                                patientId={singlePatient.info.id}\n                            />\n                        }\n                    </ul>\n\n                </div>\n\n            </div>\n\n        </div>\n\n    )\n\n}\n\nexport default SinglePatientPage\n","import React, { useState, useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Route, Switch } from \"react-router-dom\";\nimport { authenticate } from \"./store/session\";\n\n\n// ---------------------- Components ---------------------\nimport SignupFormPage from \"./components/SignupFormPage\";\nimport Navigation from \"./components/Navigation\";\nimport LoginFormPage from \"./components/LoginFormPage\";\nimport ProtectedRoute from \"./components/auth/ProtectedRoute\";\n\nimport ProviderHomePage from \"./components/PatientPages/ProviderHomePage\";\nimport SinglePatientPage from \"./components/PatientPages/SinglePatientPage\";\nimport AddInitialPatientNote from \"./components/PatientPages/AddPatientModal/AddInitialPatientNote\";\n\nfunction App() {\n  const dispatch = useDispatch();\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  useEffect(() => {\n    dispatch(authenticate()).then(() => setIsLoaded(true));\n  }, [dispatch]);\n\n  return (\n    <>\n      <Navigation isLoaded={isLoaded} />\n      {isLoaded && (\n        <Switch>\n          <Route path=\"/login\" >\n            <LoginFormPage />\n          </Route>\n\n          <Route path=\"/signup\">\n            <SignupFormPage />\n          </Route>\n\n          <ProtectedRoute exact path=\"/\">\n            <ProviderHomePage/>\n          </ProtectedRoute>\n\n          <ProtectedRoute exact path='/patients/:id'>\n            <SinglePatientPage/>\n          </ProtectedRoute>\n\n          <ProtectedRoute exact path='/test'>\n            <AddInitialPatientNote/>\n          </ProtectedRoute>\n\n\n        </Switch>\n      )}\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport { ModalProvider, Modal } from \"./context/Modal\";\nimport configureStore from \"./store\";\nimport * as sessionActions from \"./store/session\";\nimport App from \"./App\";\n\nimport \"./index.css\";\n\nconst store = configureStore();\n\nif (process.env.NODE_ENV !== \"production\") {\n\twindow.store = store;\n\twindow.sessionActions = sessionActions;\n}\n\n// Wrap the application with the Modal provider and render the Modal component\n// after the App component so that all the Modal content will be layered as\n// HTML elements on top of the all the other HTML elements:\nfunction Root() {\n\treturn (\n\t\t<ModalProvider>\n\t\t\t<Provider store={store}>\n\t\t\t\t<BrowserRouter>\n\t\t\t\t\t<App />\n\t\t\t\t\t<Modal />\n\t\t\t\t</BrowserRouter>\n\t\t\t</Provider>\n\t\t</ModalProvider>\n\t);\n}\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Root />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);"],"sourceRoot":""}